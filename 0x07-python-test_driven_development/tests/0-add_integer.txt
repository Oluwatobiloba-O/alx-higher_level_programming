The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

Check for module docstring:
    >> m = __import__("0-add_integer").__doc__
    >> len(m) > 1
    True

import add_integer from the ``0-add_integer`` module:
    >>> add_integer = __import__("0-add_integer").add_integer

Check for function docstring:
    >> f = __import__("0-add_integer").add_integer.__doc__
    >> len(f) > 1
    True

tests:
    int + int:
	    >>> add_integer(3, 7)
	    10

    float + float:
        >>> add_integer(1.3, 56.93)
        57

    int + float:
        >>> add_integer(1, 21.66)
        22

    float + int:
        >>> add_integer(21.66, 1)
        22

    -int + -int:
        >>> add_integer(-21, -1)
        -22

    -int + int:
        >>> add_integer(-21, 63)
        42

    int + -int:
        >>> add_integer(21, -63)
        -42

    str + int:
        >>> add_integer("str", 42)
        Traceback (most recent call last):
        TypeError: a must be an integer

    int + str:
        >>> add_integer(4, "hello")
        Traceback (most recent call last):
        TypeError: b must be an integer

    str + str:
        >>> add_integer("hello", "world")
        Traceback (most recent call last):
        TypeError: a must be an integer

    boolean:
        >>> add_integer(True, False)
        Traceback (most recent call last):
        TypeError: a must be an integer

    no args:
        >>> add_integer()
        Traceback (most recent call last):
        TypeError: add_integer() missing 1 required positional argument: 'a'

    one arg:
        >>> add_integer(2)
        100

    more than two args:
        >>> add_integer(1, 2, 3)
        Traceback (most recent call last):
        TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

    list:
        >>> add_integer([42], [66])
        Traceback (most recent call last):
        TypeError: a must be an integer

    tuple:
        >>> add_integer((42,), (66,))
        Traceback (most recent call last):
        TypeError: a must be an integer

    None:
        >>> add_integer(None)
        Traceback (most recent call last):
        TypeError: a must be an integer

    mixed types:
        >>> add_integer(42x, 66z)
        Traceback (most recent call last):
        SyntaxError: invalid syntax

    overflow:
        >>> add_integer(4e2000, 100e200)
        Traceback (most recent call last):
        OverflowError: cannot convert float infinity to integer

    Nan:
        >>> add_integer(5, float('NaN'))
        Traceback (most recent call last):
        ValueError: cannot convert float NaN to integer
        